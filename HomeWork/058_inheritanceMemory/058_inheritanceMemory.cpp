#include <iostream>

class A
{
public:
	__int64 Test;

public:
	// 생성자
	A()
		: Test(10)
		// 이게 곧 초기화 -> 메모리가 만들어지는 순간에 값을 입력하는 것이다
		// 멤버 이니셜라이저의 문법의 의미
		// 멤버 변수의 메모리 생성을 여기서 하는 것이다
	{
		printf_s("A 생성자\n");
	}

	// 소멸자
	~A()
	{
		printf_s("A 소멸자\n");
	}
};

class B : public A
{
public:
	char Value;


	B()
	{
		// 만들어지고 나서는 이용밖에 안된다
		Test = 30;
		printf_s("B 생성자\n");
	}

	// 소멸자
	// 소멸자는 ~클래스 이름이다 <= 다른 이름은 소멸자로 인정되지 않는다
	// 생성자와 비교해보면 직접 호출이 가능하지만 아무도 호출하지 않고
	// 무조건 이게 호출되면 이게 지워졌다고 생각할 것이기 때문에
	// 직접 호출한다고 메모리가 파괴되느냐? 안된다
	// 인자를 넣어줄 수 없다
	~B()
	{
		Test = 20;
		printf_s("B 소멸자\n");
	}
};

int main()
{
	B NewB = B();

	// 호출할 수는 있지만 메모리가 파괴되는 것은 아니다
	// 이걸 쓸수 있는데 쓰는 사람은 없다
	// 상식을 벗어나는 행위
	NewB.~B();



	int Value = sizeof(B);
} // <= 실행흐름의 끝에서 벌어지는 일은? 
	// 이 함수를 실행하는 데 쓰였던 메모리가 다 정리된다